#if command -v tmux &> /dev/null && [ -z "$TMUX" ]; then
#    tmux attach -t default || tmux new -s default
#fi
# # Turn off all beeps
unsetopt BEEP

source $HOME/.nix-profile/etc/profile.d/nix.sh
export NIX_PATH=$HOME/.nix-defexpr/channels:/nix/var/nix/profiles/per-user/root/channels${NIX_PATH:+:$NIX_PATH}

# Plugins
source ~/.zplug/init.zsh

# zplug "spaceship-prompt/spaceship-prompt", use:spaceship.zsh, from:github, as:theme
zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-syntax-highlighting"
zplug "zsh-users/zsh-completions"
zplug "MichaelAquilina/zsh-you-should-use"

zplug "plugins/sprunge",   		from:oh-my-zsh
zplug "plugins/colored-man-pages",	from:oh-my-zsh
zplug "plugins/colored-man-pages",	from:oh-my-zsh
zplug "plugins/docker",   		from:oh-my-zsh
zplug "plugins/docker-compose",		from:oh-my-zsh
zplug "plugins/kubectl",		from:oh-my-zsh
zplug "plugins/fzf", 			from:oh-my-zsh
zplug "plugins/nmap", 			from:oh-my-zsh

# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

zplug load --verbose

# History
HISTSIZE=5000               #How many lines of history to keep in memory
HISTFILE=~/.zsh_history     #Where to save history to disk
SAVEHIST=5000               #Number of history entries to save to disk
#HISTDUP=erase               #Erase duplicates in the history file
setopt    appendhistory     #Append history to the history file (no overwriting)
setopt    sharehistory      #Share history across terminals
setopt    incappendhistory  #Immediately append to the history file, not just when a term is killed

# Zoxide
eval "$(zoxide init zsh)"

# The Fuck
if command -v thefuck > /dev/null 2>&1; then
  eval $(thefuck --alias)
fi


# Let jobs continue even if shell exits
setopt NO_HUP




# Add local tools to PATH
test -e "${HOME}/.scripts" && PATH="${HOME}/.scripts:${PATH}"
test -e "${HOME}/bin" && PATH="${HOME}/.bin:${PATH}"
test -e "${HOME}/.local/bin" && PATH="${HOME}/.local/bin:${PATH}"
test -e "${HOME}/.emacs.d/bin" && PATH="${HOME}/.emacs.d/bin:${PATH}"

if [ "${IS_MAC}" = "1" ]; then
  test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
  test -e "${HOME}/Library/Python/3.9/bin" && PATH="${HOME}/Library/Python/3.9/bin:${PATH}"
  test -e "/opt/homebrew/opt/ruby/bin" && PATH="/opt/homebrew/opt/ruby/bin:${PATH}"
  test -e "${HOME}/.local/share/gem/ruby/3.0.0/bin" && PATH="${HOME}/.local/share/gem/ruby/3.0.0/bin:${PATH}"
fi

# Python
export PATH="$HOME/.poetry/bin:$PATH"
export PATH=$PATH:$HOME/bin

# Enable shims and autocompletion for pyenv.
if command -v pyenv -v > /dev/null 2>&1; then
  export PYENV_ROOT="$HOME/.pyenv"
  command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
  eval "$(pyenv init --path)"
  eval "$(pyenv virtualenv-init -)"
fi

# Aliases
if [ -e $HOME/.zsh_aliases ]; then
    source $HOME/.zsh_aliases
else
    echo '.zsh_aliases not found'
fi

### START-Keychain ###
# Let  re-use ssh-agent and/or gpg-agent between logins
/usr/bin/keychain $HOME/.ssh/id_ed25519
source $HOME/.keychain/$HOST-sh
### End-Keychain ###


if command -v neofetch > /dev/null 2>&1; then
  clear 
  neofetch
else
  echo 'Install Neofetch'
fi

eval "$(starship init zsh)"

export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"


# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/glen/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/glen/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/glen/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/glen/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

eval "$(atuin init zsh --disable-up-arrow)"
