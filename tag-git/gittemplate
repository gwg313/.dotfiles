
#<type>(optional scope): <description>
#Problem:

#Solution:

#Testing:

#Issue:


# type: build ci chore docs feat fix perf refactor revert style test

#    fix: a commit that fixes a bug in Uno.
#    feat: a commit that adds new functionality to Uno.
#    docs: a commit that adds or improves Uno's documentation.
#    test: a commit that adds unit tests.
#    perf: a commit that improves performance, without functional changes.
#    chore: a catch-all type for any other commits. For instance, if you're implementing a single feature and it makes sense to divide the work into multiple commits, you should mark one commit as feat and the rest as chore.

# The scope optionally provides extra context. If you're fixing a ListView bug, for example, you might use fix(listview)

#[optional body]
#[optional footer(s)]


# EXAMPLES

# Commit message with description and breaking change footer

# feat: allow provided config object to extend other configs

# BREAKING CHANGE: `extends` key in config file is now used for extending other config files

#----------------------------------------------------

# Commit message with ! to draw attention to breaking change

# feat!: send an email to the customer when a product is shipped

#----------------------------------------------------

# Commit message with scope and ! to draw attention to breaking change

# feat(api)!: send an email to the customer when a product is shipped
